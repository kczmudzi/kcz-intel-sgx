init enclave 36754622
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 9940895076
destroy enclave 1773560
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          4,990.25 msec task-clock                       #    1.000 CPUs utilized             
           513,000      context-switches                 #  102.800 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               663      page-faults                      #  132.859 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       4.991105068 seconds time elapsed

       4.311769000 seconds user
       0.670867000 seconds sys


init enclave 37367436
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 9108389812
destroy enclave 1759128
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          4,573.12 msec task-clock                       #    1.000 CPUs utilized             
           468,351      context-switches                 #  102.414 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               662      page-faults                      #  144.759 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       4.575105290 seconds time elapsed

       3.734767000 seconds user
       0.831403000 seconds sys


init enclave 36956864
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 2943723242
destroy enclave 1778272
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          1,490.90 msec task-clock                       #    0.999 CPUs utilized             
           143,777      context-switches                 #   96.436 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               663      page-faults                      #  444.698 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       1.492543643 seconds time elapsed

       1.295713000 seconds user
       0.192652000 seconds sys


init enclave 37134272
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 7135695378
destroy enclave 1742916
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          3,587.08 msec task-clock                       #    1.000 CPUs utilized             
           362,457      context-switches                 #  101.045 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               661      page-faults                      #  184.272 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       3.588576415 seconds time elapsed

       2.854086000 seconds user
       0.727048000 seconds sys


init enclave 37373670
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 6974563386
destroy enclave 1725406
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          3,506.73 msec task-clock                       #    1.000 CPUs utilized             
           358,374      context-switches                 #  102.196 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               662      page-faults                      #  188.780 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       3.508139547 seconds time elapsed

       2.697452000 seconds user
       0.803687000 seconds sys


init enclave 37210430
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 205541814
destroy enclave 1736600
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

            122.93 msec task-clock                       #    0.996 CPUs utilized             
               135      context-switches                 #    1.098 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               654      page-faults                      #    5.320 K/sec                     
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       0.123462941 seconds time elapsed

       0.101982000 seconds user
       0.020785000 seconds sys


init enclave 37114968
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 7957089198
destroy enclave 1762912
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          3,991.25 msec task-clock                       #    0.998 CPUs utilized             
           402,718      context-switches                 #  100.900 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               658      page-faults                      #  164.860 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       3.999286812 seconds time elapsed

       3.187601000 seconds user
       0.797390000 seconds sys


init enclave 37169160
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[condition_variable] Loading Data...
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 423424220
destroy enclave 1777904
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

            231.27 msec task-clock                       #    0.995 CPUs utilized             
            11,317      context-switches                 #   48.935 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               657      page-faults                      #    2.841 K/sec                     
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       0.232491174 seconds time elapsed

       0.200757000 seconds user
       0.029973000 seconds sys


init enclave 37037414
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 3503963276
destroy enclave 1735298
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          1,771.84 msec task-clock                       #    1.000 CPUs utilized             
           172,728      context-switches                 #   97.485 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               658      page-faults                      #  371.365 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       1.772668730 seconds time elapsed

       1.404424000 seconds user
       0.364332000 seconds sys


init enclave 36758426
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 2849034194
destroy enclave 1780874
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          1,443.65 msec task-clock                       #    0.999 CPUs utilized             
           138,505      context-switches                 #   95.941 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               660      page-faults                      #  457.175 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       1.445087283 seconds time elapsed

       1.238875000 seconds user
       0.202728000 seconds sys



init enclave 82909514
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 7247538890
destroy enclave 2059090
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          3,666.22 msec task-clock                       #    1.000 CPUs utilized             
           242,874      context-switches                 #   66.246 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               657      page-faults                      #  179.203 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       3.667729050 seconds time elapsed

       3.332303000 seconds user
       0.309851000 seconds sys


init enclave 83458278
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 419469726
destroy enclave 2051258
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

            252.73 msec task-clock                       #    0.995 CPUs utilized             
             7,456      context-switches                 #   29.502 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               657      page-faults                      #    2.600 K/sec                     
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       0.253904105 seconds time elapsed

       0.202838000 seconds user
       0.047717000 seconds sys


init enclave 84252754
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 2534724188
destroy enclave 2071078
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          1,311.25 msec task-clock                       #    0.999 CPUs utilized             
            81,563      context-switches                 #   62.202 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               655      page-faults                      #  499.522 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       1.311975437 seconds time elapsed

       1.162138000 seconds user
       0.140024000 seconds sys


init enclave 84195678
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 10889178732
destroy enclave 2025594
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          5,488.09 msec task-clock                       #    1.000 CPUs utilized             
           371,942      context-switches                 #   67.773 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               661      page-faults                      #  120.443 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       5.489170108 seconds time elapsed

       4.993748000 seconds user
       0.458912000 seconds sys


init enclave 83638560
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 14521559992
destroy enclave 2043618
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          7,302.66 msec task-clock                       #    1.000 CPUs utilized             
           501,446      context-switches                 #   68.666 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               659      page-faults                      #   90.241 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       7.305099527 seconds time elapsed

       6.674456000 seconds user
       0.581175000 seconds sys


init enclave 83487226
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 7129251636
destroy enclave 2075004
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          3,607.19 msec task-clock                       #    1.000 CPUs utilized             
           237,288      context-switches                 #   65.782 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               661      page-faults                      #  183.245 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       3.608851356 seconds time elapsed

       3.269517000 seconds user
       0.313812000 seconds sys


init enclave 84352490
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 4400255778
destroy enclave 2075142
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          2,243.05 msec task-clock                       #    0.999 CPUs utilized             
           145,883      context-switches                 #   65.038 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               661      page-faults                      #  294.689 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       2.244786719 seconds time elapsed

       2.000545000 seconds user
       0.227539000 seconds sys


init enclave 85889058
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 5637544012
destroy enclave 2019872
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

          2,863.27 msec task-clock                       #    1.000 CPUs utilized             
           184,326      context-switches                 #   64.376 K/sec                     
                 0      cpu-migrations                   #    0.000 /sec                      
               662      page-faults                      #  231.204 /sec                      
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       2.864174886 seconds time elapsed

       2.589583000 seconds user
       0.255262000 seconds sys


init enclave 85416856
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[condition_variable] Loading Data...
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 208776462
destroy enclave 2099324
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

            149.05 msec task-clock                       #    0.997 CPUs utilized             
               135      context-switches                 #  905.706 /sec                      
                 0      cpu-migrations                   #    0.000 /sec                      
               655      page-faults                      #    4.394 K/sec                     
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       0.149577586 seconds time elapsed

       0.104199000 seconds user
       0.043669000 seconds sys


init enclave 84587394
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 300000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 600000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 900000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1200000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1500000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 1800000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2100000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2400000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 2700000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
[Lambdas] Initial array using lambdas: { 0 1 2 3 4 5 6 7 8 9 10 }.
[Lambdas] First odd element in the array is 1. 
[Lambdas] Number of even elements in the array is 6.
[Lambdas] Array after sort: { 10 9 8 7 6 5 4 3 2 1 0 }. 

[auto] Type of a is int. typeid = i.
[auto] Type of b1 is const double. typeid = d.
[auto] Type of b2 is const double*. typeid = PKd.
[auto] Type of c is int. typeid = i.
[auto] Type of d is int*. typeid = Pi.
[auto] Type of lambda is [] {}. typeid = *Z15ecall_auto_demoEUlvE_.
[auto] Type of func is void(__cdecl*)(void). typeid = PFvvE.
[auto] Function sample_func_auto_demo is called. 

[decltype] Type of b is int. typeid = i.
[decltype] Type of sum is double. typeid = d.

[range_based_for_loops] Using range based for loops to print the content of an array: { a b c d }. 
[range_based_for_loops] Using range based for loops to print the content of an vector: { a b c d }.

[delegating constructors] Called from DemoDelegatingConstructors(int a, int b, int c).
[delegating constructors] Called from DemoDelegatingConstructors(int a, int b). 
[delegating constructors] Called from DemoDelegatingConstructors(int a). 

[std_function] calling sample_std_function1
[std_function] calling a lambda function

[cxx11_algorithms] All elements in  { 0 1 2  3 4 5 } are even is  false. 
[cxx11_algorithms] Some elements in  { 0 1 2 3 4 5 } are even is  true. 
[cxx11_algorithms] None elements in  { 0 1 2 3 4 5 } are even is  false. 

[variadic_templates] The sum  of paramters (1, 2, 3, 4, 5) is 15. 

[sfinae] Second candidate for substitution is matched.

[initializer_list] Using initializer list in the constructor. 
[initializer_list] The elements of the vector are: 10 9 8 7 6 5 4 3 2 1.

[rvalue] DemoBuffer a(100).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] DemoBuffer foobar(100). 
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called constructor : DemoBuffer(int size).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).
[rvalue] DemoBuffer b(a).
[rvalue] Called copy constructor : DemoBuffer(const DemoBuffer & rhs).
[rvalue] DemoBuffer c(std::move(a)).
[rvalue] Called move constructor : DemoBuffer(DemoBuffer && rhs).

[nullptr] called void nullptr_overload_candidate(int i).
[nullptr] called void nullptr_overload_candidate(int* ptr).
[nullptr] Function g called
[nullptr] Function g called
[nullptr] Function g called

[enum class] brown - int = 1
[enum class] red - int = 32
[enum class] green - int = 30

[new_container_classes] unordered_set { 0, 1, 2, 3, 4, 5} has value 3.
[new_container_classes] multiset_set { 0, 1, 2, 3, 3, 3}  has 3 elements with value 3.
[new_container_classes] unordered_map elements: {[E 3] [D 5] [C 7] [B 8] [A 10] }.
[new_container_classes] unordered_multimap elements: {[E 5] [E 3] [E 1] [B 8] [B 7] [A 10] }.

[tuple] show first  element in TupleSample: <First element of TupleSample>. 
[tuple] show second element in TupleSample: 1. 
[tuple] show third  element in TupleSample: 7.900000. 

[smart_ptr] In construct of object demo_smart_ptr  using smart_ptr.. 
[smart_ptr] shared_ptr reference count = 1.  
[smart_ptr] shared_ptr reference count = 2 incresead after creating another shared pointer.
[smart_ptr] shared_ptr reference count = 1 decresead after calling releasing ownership. 
[smart_ptr] In construct of object demo_smart_ptr  using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using unique_ptr. 
[smart_ptr] In deconstructor of object demo_smart_ptr using smart_ptr.. 
[atomic] Atomic types, objects and functions demo.
[atomic_store] Defining an atomic_char object with an initial value of 5.
[atomic_store] The current value stored in the atomic object is: 5
[atomic_store] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_store_explicit] Defining an atomic_short object with an initial value of 5.
[atomic_store_explicit] The current value stored in the atomic object is: 5.
[atomic_store_explicit] Replacing the value of the atomic object with a non-atomic value of 3.
[atomic_store] The new value of the atomic object is: 3.

[atomic_load] Defining an atomic_int object with an initial value of 4.
[atomic_load] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load] The obtained value is 4.

[atomic_load_explicit] Defining an atomic_int object with an initial value of 2.
[atomic_load_explicit] Obtaining the value of the atomic object and saving it in a int variable.
[atomic_load_explicit] The obtained value is 2.

[atomic_fetch_add] Defining an atomic_int object with an initial value of 7.
[atomic_fetch_add] The current value stored in the atomic object is: 7.
[atomic_fetch_add] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add] The new value of the atomic object is: 15.

[atomic_fetch_add_explicit] Defining an atomic_uint object with an initial value of 7.
[atomic_fetch_add_explicit] The current value stored in the atomic object is: 7.
[atomic_fetch_add_explicit] Adding a non-atomic value of 8 to the atomic object.
[atomic_fetch_add_explicit] The new value of the atomic object is: 15.

[atomic_fetch_sub] Defining an atomic_long object with an initial value of 20.
[atomic_fetch_sub] The current value stored in the atomic object is: 20.
[atomic_fetch_sub] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub] The new value of the atomic object is: 12.

[atomic_fetch_sub_explicit] Defining an atomic_llong object with an initial value of 20.
[atomic_fetch_sub_explicit] The current value stored in the atomic object is: 20.
[atomic_fetch_sub_explicit] Substracting a non-atomic value of 8 from the value of the atomic object.
[atomic_fetch_sub_explicit] The new value of the atomic object is: 12.

[mutex] Incrementing values in three threads without mutex protection, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[mutex] Mutex protection when incrementing a value in 3 threads, using a 100000 times loop. 
[mutex]Expected value is 300000. The final value is 3000000.
[condition_variable] Loading Data...

[condition_variable] Running condition variable demo.
[condition_variable] Waiting for the data to be loaded in the other thread.
[condition_variable] Processing the loaded data.
[condition_variable] Done.
ecall enclave 219951070
destroy enclave 2018976
Info: Cxx11DemoEnclave successfully returned.

 Performance counter stats for './app':

            154.18 msec task-clock                       #    0.996 CPUs utilized             
               138      context-switches                 #  895.047 /sec                      
                 0      cpu-migrations                   #    0.000 /sec                      
               659      page-faults                      #    4.274 K/sec                     
   <not supported>      cycles                                                                
   <not supported>      instructions                                                          
   <not supported>      branches                                                              
   <not supported>      branch-misses                                                         

       0.154755383 seconds time elapsed

       0.113085000 seconds user
       0.039690000 seconds sys


